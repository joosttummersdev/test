---
import Layout from '../../layouts/login/Layout.astro';
import { supabase } from '../../lib/supabaseClient';

// Check if user is already logged in and redirect appropriately
const { data: { session } } = await supabase.auth.getSession();

if (session?.user) {
  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', session.user.id)
    .single();

  if (profile?.role === 'admin') {
    return Astro.redirect('/admin');
  } else if (profile?.role === 'agent') {
    return Astro.redirect('/agent');
  }
}
---

<Layout title="Admin Login">
  <div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Admin Login
      </h2>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="login-form" class="space-y-6">
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">
              Email address
            </label>
            <div class="mt-1">
              <input
                id="email"
                name="email"
                type="email"
                autocomplete="email"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
              />
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div class="mt-1">
              <input
                id="password"
                name="password"
                type="password"
                autocomplete="current-password"
                required
                class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
              />
            </div>
          </div>

          <div id="error-message" class="rounded-md bg-red-50 p-4 hidden">
            <div class="flex">
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800"></h3>
              </div>
            </div>
          </div>

          <div>
            <button
              type="submit"
              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500"
            >
              Sign in
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Debug Log -->
    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white shadow sm:rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <h3 class="text-lg font-medium leading-6 text-gray-900">Debug Log</h3>
          <div id="debug-log" class="mt-4 bg-gray-50 p-4 rounded-md font-mono text-sm h-48 overflow-y-auto space-y-1">
            <!-- Debug messages will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { signIn } from '../../lib/auth';

  const form = document.getElementById('login-form');
  const errorBox = document.getElementById('error-message');
  const errorText = errorBox?.querySelector('h3');
  const debugLog = document.getElementById('debug-log');

  function addDebugMessage(message: string, type = 'info') {
    if (!debugLog) return;
    
    const entry = document.createElement('div');
    entry.className = `py-1 ${
      type === 'error' ? 'text-red-600' :
      type === 'success' ? 'text-green-600' :
      type === 'warning' ? 'text-yellow-600' :
      'text-gray-600'
    }`;
    
    const timestamp = new Date().toLocaleTimeString();
    entry.textContent = `[${timestamp}] ${message}`;
    
    debugLog.appendChild(entry);
    debugLog.scrollTop = debugLog.scrollHeight;
    
    console.log(`[${type.toUpperCase()}] ${message}`);
  }

  // Debug: Log when script loads
  addDebugMessage('Login script initialized');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    addDebugMessage('Form submitted');

    const email = form.email.value;
    const password = form.password.value;

    try {
      addDebugMessage('Attempting login...');
      const { data, error } = await signIn(email, password);

      if (error) {
        addDebugMessage(`Login error: ${error.message}`, 'error');
        throw error;
      }

      if (!data?.user) {
        addDebugMessage('No user data received', 'error');
        throw new Error('No user data received');
      }

      addDebugMessage('Login successful', 'success');
      addDebugMessage(`User ID: ${data.user.id}`, 'success');
      addDebugMessage(`User role: ${data.profile.role}`, 'success');

      // Redirect based on role
      if (data.profile.role === 'admin') {
        window.location.href = '/admin';
      } else if (data.profile.role === 'agent') {
        window.location.href = '/agent';
      } else {
        addDebugMessage('Invalid role, staying on login page', 'warning');
      }

    } catch (err: any) {
      addDebugMessage(`Error: ${err.message}`, 'error');
      if (errorBox && errorText) {
        errorText.textContent = err.message || 'Login failed';
        errorBox.classList.remove('hidden');
      }
    }
  });
</script>