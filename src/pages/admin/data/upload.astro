---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { supabase } from '../../../lib/supabaseClient';

// Get suppliers for dropdown
const { data: suppliers } = await supabase
  .from('suppliers')
  .select('id, name')
  .order('name');
---

<AdminLayout title="Data Upload">
  <div class="space-y-6">
    <div class="sm:flex sm:items-center sm:justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Klantgegevens Upload</h1>
        <p class="mt-2 text-sm text-gray-700">
          Upload een Excel bestand met klantgegevens. Alleen voor- en achternaam zijn verplicht.
        </p>
      </div>
    </div>

    <!-- Upload Form -->
    <div class="bg-white shadow sm:rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <form id="uploadForm" class="space-y-6">
          <div>
            <label class="block text-sm font-medium text-gray-700">
              Excel Bestand
            </label>
            <div class="mt-1">
              <input
                type="file"
                name="file"
                accept=".xlsx,.xls,.csv"
                required
                class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
              />
              <p class="mt-2 text-sm text-gray-500">
                Accepteert .xlsx, .xls en .csv bestanden (max. 5MB)
              </p>
            </div>
          </div>

          <div class="bg-gray-50 p-4 rounded-md">
            <h3 class="text-sm font-medium text-gray-700 mb-2">Ondersteunde kolomnamen:</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
              <div>
                <p class="font-medium mb-1">Verplichte velden:</p>
                <ul class="list-disc list-inside space-y-1 ml-2">
                  <li>Voornaam</li>
                  <li>Achternaam</li>
                </ul>
              </div>
              <div>
                <p class="font-medium mb-1">Optionele velden:</p>
                <ul class="list-disc list-inside space-y-1 ml-2">
                  <li>Email / E-mail</li>
                  <li>Telefoon / Tel</li>
                  <li>Straat / Straatnaam</li>
                  <li>Huisnummer / Nr</li>
                  <li>Postcode</li>
                  <li>Geboortedatum</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="pt-5">
            <div class="flex justify-end">
              <button
                type="submit"
                id="submitButton"
                class="ml-3 inline-flex justify-center rounded-md border border-transparent bg-orange-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2"
              >
                <span>Uploaden</span>
                <svg id="loadingSpinner" class="animate-spin ml-2 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Preview Section -->
    <div id="previewSection" class="hidden">
      <div class="bg-white shadow sm:rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <h3 class="text-lg font-medium leading-6 text-gray-900">Preview</h3>
          <div class="mt-6 overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200" id="previewTable">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Voornaam
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Achternaam
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Email
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Telefoon
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Adres
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <!-- Preview rows will be inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Confirmation Button -->
      <div class="flex justify-end mt-6">
        <button
          type="button"
          id="confirmButton"
          class="inline-flex justify-center rounded-md border border-transparent bg-orange-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2"
        >
          Bevestig en Verwerk
        </button>
      </div>
    </div>

    <!-- Processing Status -->
    <div id="processingStatus" class="hidden">
      <div class="bg-white shadow sm:rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <h3 class="text-lg font-medium leading-6 text-gray-900">Verwerking Status</h3>
          <div class="mt-6 space-y-4">
            <div class="flex items-center justify-between">
              <span class="text-sm font-medium text-gray-500">Voortgang</span>
              <span class="text-sm font-medium text-gray-900" id="progressText">0%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-orange-600 h-2.5 rounded-full" id="progressBar" style="width: 0%"></div>
            </div>
            <div id="statusMessages" class="mt-4 space-y-2">
              <!-- Status messages will be inserted here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { supabase } from '../../../lib/supabaseClient';
  import * as XLSX from 'xlsx';

  const maxFileSize = 5 * 1024 * 1024; // 5MB
  const form = document.getElementById('uploadForm');
  const previewSection = document.getElementById('previewSection');
  const previewTable = document.getElementById('previewTable');
  const processingStatus = document.getElementById('processingStatus');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  const statusMessages = document.getElementById('statusMessages');
  const submitButton = document.getElementById('submitButton');
  const loadingSpinner = document.getElementById('loadingSpinner');
  const confirmButton = document.getElementById('confirmButton');

  let parsedData = [];

  // Column mapping with Dutch variations
  const columnMappings = {
    first_name: ['Voornaam', 'First Name', 'FirstName', 'First'],
    last_name: ['Achternaam', 'Last Name', 'LastName', 'Last'],
    email: ['Email', 'E-mail', 'E-mailadres', 'EmailAddress'],
    phone: ['Telefoon', 'Phone', 'PhoneNumber', 'Tel', 'Telefoonnummer'],
    street: ['Straat', 'Straatnaam', 'Street', 'Address', 'Adres'],
    house_number: ['Huisnummer', 'Nr', 'Number', 'HouseNumber', 'House'],
    postal_code: ['Postcode', 'Zip', 'ZipCode', 'PostalCode'],
    date_of_birth: ['Geboortedatum', 'DateOfBirth', 'Birth Date', 'DOB']
  };

  // Find matching column name
  function findMatchingColumn(headers: string[], mappings: string[]): string | null {
    const normalizedHeaders = headers.map(h => h.toLowerCase().trim());
    const normalizedMappings = mappings.map(m => m.toLowerCase().trim());
    
    for (const mapping of normalizedMappings) {
      const index = normalizedHeaders.indexOf(mapping);
      if (index !== -1) {
        return headers[index];
      }
    }
    return null;
  }

  // Add status message
  function addStatusMessage(message: string, type: 'success' | 'error' | 'warning' = 'success') {
    const div = document.createElement('div');
    div.className = `flex items-center text-sm ${
      type === 'success' ? 'text-green-700' :
      type === 'warning' ? 'text-yellow-700' :
      'text-red-700'
    }`;
    div.innerHTML = `
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        ${type === 'success' 
          ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>'
          : type === 'warning'
          ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>'
          : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>'}
      </svg>
      ${message}
    `;
    statusMessages?.appendChild(div);
  }

  // Update progress
  function updateProgress(percent: number) {
    if (progressBar && progressText) {
      progressBar.style.width = `${percent}%`;
      progressText.textContent = `${percent}%`;
    }
  }

  // Toggle loading state
  function setLoading(isLoading: boolean) {
    if (submitButton && loadingSpinner) {
      submitButton.disabled = isLoading;
      loadingSpinner.classList.toggle('hidden', !isLoading);
      const buttonText = submitButton.querySelector('span');
      if (buttonText) {
        buttonText.textContent = isLoading ? 'Verwerken...' : 'Uploaden';
      }
    }
  }

  // Parse Excel file
  async function parseExcel(file: File) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        try {
          const data = e.target?.result;
          const workbook = XLSX.read(data, { type: 'array' });
          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
          const rows = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
          
          // Get headers from first row
          const headers = rows[0];
          const headerRow = Object.values(headers);
          
          // Create column mapping
          const columnMap = {};
          Object.entries(columnMappings).forEach(([field, possibleNames]) => {
            const matchingColumn = findMatchingColumn(headerRow, possibleNames);
            if (matchingColumn) {
              columnMap[matchingColumn] = field;
            }
          });
          
          // Map data rows
          const mappedData = rows.slice(1).map(row => {
            const mappedRow = {};
            Object.entries(row).forEach(([col, value]) => {
              const field = columnMap[headers[col]];
              if (field && value !== undefined && value !== null && value !== '') {
                mappedRow[field] = value.toString().trim();
              }
            });
            
            // Check if we have enough data to process this row
            if (!mappedRow.first_name || !mappedRow.last_name) {
              return null;
            }
            
            return mappedRow;
          }).filter(row => row !== null);
          
          resolve(mappedData);
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = (error) => reject(error);
      reader.readAsArrayBuffer(file);
    });
  }

  // Show preview
  function showPreview(data: any[]) {
    const tbody = previewTable?.querySelector('tbody');
    if (!tbody) return;

    tbody.innerHTML = data.slice(0, 5).map(row => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${row.first_name}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ${row.last_name}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
          ${row.email || '-'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${row.phone || '-'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
          ${row.street ? `${row.street} ${row.house_number || ''}, ${row.postal_code || ''}` : '-'}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="${row.street ? 'text-green-600' : 'text-yellow-600'}">
            ${row.street ? 'Compleet' : 'Basis'}
          </span>
        </td>
      </tr>
    `).join('');

    previewSection?.classList.remove('hidden');
  }

  // Process customer data
  async function processCustomers(data: any[]) {
    let processed = 0;
    let successful = 0;
    let basic = 0;
    const total = data.length;
    
    processingStatus?.classList.remove('hidden');
    previewSection?.classList.add('hidden');
    
    for (const row of data) {
      try {
        // Create customer with only required fields
        const customerData = {
          first_name: row.first_name.trim(),
          last_name: row.last_name.trim()
        };

        // Add optional fields if present
        if (row.email) customerData.email = row.email.trim();
        if (row.phone) customerData.phone = row.phone.trim();
        if (row.street) {
          customerData.street = row.street.trim();
          customerData.house_number = (row.house_number || '').trim();
          customerData.postal_code = (row.postal_code || '').trim();
        }
        if (row.date_of_birth) customerData.date_of_birth = row.date_of_birth;
        
        const { error: customerError } = await supabase
          .from('customers')
          .insert(customerData);
        
        if (customerError) throw customerError;
        
        successful++;
        
        if (!row.street) {
          basic++;
          addStatusMessage(
            `Klant ${row.first_name} ${row.last_name} verwerkt met basis gegevens`,
            'warning'
          );
        } else {
          addStatusMessage(`Klant ${row.first_name} ${row.last_name} succesvol verwerkt`);
        }
      } catch (error) {
        console.error('Error processing customer:', error);
        addStatusMessage(
          `Fout bij verwerken klant ${row.first_name} ${row.last_name}: ${error.message}`,
          'error'
        );
      }
      
      processed++;
      updateProgress(Math.round((processed / total) * 100));
    }
    
    // Show completion message
    addStatusMessage(
      `Verwerking voltooid: ${successful} klanten verwerkt (${basic} met alleen basis gegevens)`
    );
    
    // Add link to customer overview
    const div = document.createElement('div');
    div.className = 'mt-4';
    div.innerHTML = `
      <a href="/admin/data" class="text-orange-600 hover:text-orange-900">
        Ga naar Klantenoverzicht
      </a>
    `;
    statusMessages?.appendChild(div);
  }

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const file = formData.get('file') as File;
    
    if (!file) {
      alert('Selecteer een bestand');
      return;
    }
    
    if (file.size > maxFileSize) {
      alert('Bestand is te groot (max 5MB)');
      return;
    }
    
    try {
      setLoading(true);
      parsedData = await parseExcel(file);
      showPreview(parsedData);
    } catch (error) {
      console.error('Error processing file:', error);
      alert('Fout bij het verwerken van het bestand');
    } finally {
      setLoading(false);
    }
  });

  // Handle confirmation
  confirmButton?.addEventListener('click', async () => {
    await processCustomers(parsedData);
  });
</script>